[{"path":"https://uchidamizuki.github.io/timbr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 timbr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://uchidamizuki.github.io/timbr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mizuki Uchida. Author, maintainer.","code":""},{"path":"https://uchidamizuki.github.io/timbr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Uchida M (2024). timbr: Forest/Tree Data Frames. R package version 0.2.2.9000, https://uchidamizuki.github.io/timbr/, https://github.com/UchidaMizuki/timbr.","code":"@Manual{,   title = {timbr: Forest/Tree Data Frames},   author = {Mizuki Uchida},   year = {2024},   note = {R package version 0.2.2.9000,     https://uchidamizuki.github.io/timbr/},   url = {https://github.com/UchidaMizuki/timbr}, }"},{"path":"https://uchidamizuki.github.io/timbr/index.html","id":"timbr","dir":"","previous_headings":"","what":"Forest/Tree Data Frames","title":"Forest/Tree Data Frames","text":"timbr provides data frames forest tree data structures. can create forest data structures data frames process based hierarchies.","code":""},{"path":"https://uchidamizuki.github.io/timbr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forest/Tree Data Frames","text":"can install development version timbr GitHub :","code":"# the released version from CRAN: install.packages(\"timbr\")  # the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"UchidaMizuki/timbr\")"},{"path":"https://uchidamizuki.github.io/timbr/index.html","id":"main-functions","dir":"","previous_headings":"","what":"Main Functions","title":"Forest/Tree Data Frames","text":"main functions provided timbr follows, children() climb() leaves() traverse() rbind()","code":""},{"path":"https://uchidamizuki.github.io/timbr/index.html","id":"tidyverse-methods","dir":"","previous_headings":"","what":"tidyverse methods","title":"Forest/Tree Data Frames","text":"timbr provides tidyverse methods follows, mutate() summarise() select() relocate() rows_update() rows_patch()","code":""},{"path":"https://uchidamizuki.github.io/timbr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Forest/Tree Data Frames","text":"","code":"library(timbr) library(dplyr) fr <- tidyr::expand_grid(key1 = letters[1:2],                          key2 = letters[1:2],                          key3 = letters[1:2]) |>     mutate(value = row_number()) |>    forest_by(key1, key2, key3)  fr_sum <- fr |>    summarise(value = sum(value)) |>    summarise(value = sum(value))  fr #> # A forest: 8 nodes and 1 feature #> # Groups:   key1, key2 [4] #> # Trees:     #> #   key3 [8] #>   key1  key2  .        value #>   <chr> <chr> <node>   <int> #> 1 a     a     <key3> a     1 #> 2 a     a     <key3> b     2 #> 3 a     b     <key3> a     3 #> 4 a     b     <key3> b     4 #> 5 b     a     <key3> a     5 #> 6 b     a     <key3> b     6 #> 7 b     b     <key3> a     7 #> 8 b     b     <key3> b     8 fr_sum #> # A forest: 14 nodes and 1 feature #> # Trees:     #> #   key1 [2] #> #   └─key2 [4] #> #     └─key3 [8] #>   .        value #>   <node>   <int> #> 1 <key1> a    10 #> 2 <key1> b    26 children(fr_sum) #> # A forest: 12 nodes and 1 feature #> # Groups:   key1 [2] #> # Trees:     #> #   key2 [4] #> #   └─key3 [8] #>   key1  .        value #>   <chr> <node>   <int> #> 1 a     <key2> a     3 #> 2 a     <key2> b     7 #> 3 b     <key2> a    11 #> 4 b     <key2> b    15 fr_sum |>    climb(key3) #> # A forest: 8 nodes and 1 feature #> # Trees:     #> #   key3 [8] #>   .        value #>   <node>   <int> #> 1 <key3> a     1 #> 2 <key3> b     2 #> 3 <key3> a     3 #> 4 <key3> b     4 #> 5 <key3> a     5 #> 6 <key3> b     6 #> 7 <key3> a     7 #> 8 <key3> b     8 fr1 <- tidyr::expand_grid(key1 = letters[1:2],                            key2_1 = letters[1:2],                           key3_1 = letters[1:2]) |>    mutate(value = row_number()) |>    forest_by(key1, key2_1, key3_1) |>    summarise(value = sum(value))  fr2 <- tidyr::expand_grid(key1 = letters[1:2],                            key2_2 = letters[1:2],                           key3_2 = letters[1:2]) |>    mutate(value = row_number()) |>    forest_by(key1, key2_2, key3_2) |>    summarise(value = sum(value))  fr <- rbind(fr1, fr2) fr_sum <- fr |>    summarise(value = sum(value))  fr #> # A forest: 24 nodes and 1 feature #> # Groups:   key1 [2] #> # Trees:     #> #   key2_1 [4] #> #   └─key3_1 [8] #> #   key2_2 [4] #> #   └─key3_2 [8] #>   key1  .          value #>   <chr> <node>     <int> #> 1 a     <key2_1> a     3 #> 2 a     <key2_1> b     7 #> 3 b     <key2_1> a    11 #> 4 b     <key2_1> b    15 #> 5 a     <key2_2> a     3 #> 6 a     <key2_2> b     7 #> 7 b     <key2_2> a    11 #> 8 b     <key2_2> b    15 fr_sum #> # A forest: 26 nodes and 1 feature #> # Trees:     #> #   key1 [2] #> #   ├─key2_1 [4] #> #   │ └─key3_1 [8] #> #   └─key2_2 [4] #> #     └─key3_2 [8] #>   .        value #>   <node>   <int> #> 1 <key1> a    20 #> 2 <key1> b    52 traverse(fr_sum,          function(x, children) {            x$value <- prod(children$value)            x          }) #> # A forest: 26 nodes and 1 feature #> # Trees:     #> #   key1 [2] #> #   ├─key2_1 [4] #> #   │ └─key3_1 [8] #> #   └─key2_2 [4] #> #     └─key3_2 [8] #>   .          value #>   <node>     <int> #> 1 <key1> a     576 #> 2 <key1> b 2822400"},{"path":"https://uchidamizuki.github.io/timbr/reference/as_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a forest — as_forest","title":"Coerce to a forest — as_forest","text":"Coerce forest","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/as_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a forest — as_forest","text":"","code":"as_forest(x, ...)"},{"path":"https://uchidamizuki.github.io/timbr/reference/as_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a forest — as_forest","text":"x object. ... Unused, extensibility.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/as_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a forest — as_forest","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/children.html","id":null,"dir":"Reference","previous_headings":"","what":"Children of the forest — children","title":"Children of the forest — children","text":"Convert forest forest consisting child nodes.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Children of the forest — children","text":"","code":"children(data, name = NULL)"},{"path":"https://uchidamizuki.github.io/timbr/reference/children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Children of the forest — children","text":"data forest. name `NULL` (default) scalar character specifying node name child nodes.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Children of the forest — children","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/climb.html","id":null,"dir":"Reference","previous_headings":"","what":"Climb a forest from parents to children — climb","title":"Climb a forest from parents to children — climb","text":"Climb forest parents children one node names.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/climb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climb a forest from parents to children — climb","text":"","code":"climb(.data, ..., .recurse = TRUE, .deep)"},{"path":"https://uchidamizuki.github.io/timbr/reference/climb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climb a forest from parents to children — climb","text":".data forest. ... list node names climb forest. .recurse Whether search recursively node names ? .deep (Deprecated) Whether search recursively node names ?","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/climb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climb a forest from parents to children — climb","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/forest_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a forest by one or more variables — forest_by","title":"Constructs a forest by one or more variables — forest_by","text":"`forest_by()` constructs forest one variables.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/forest_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a forest by one or more variables — forest_by","text":"","code":"forest_by(.data, ...)"},{"path":"https://uchidamizuki.github.io/timbr/reference/forest_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a forest by one or more variables — forest_by","text":".data data frame. ... Variables.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/forest_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a forest by one or more variables — forest_by","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Leaf nodes of a forest — leaves","title":"Leaf nodes of a forest — leaves","text":"Leaf nodes forest","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaf nodes of a forest — leaves","text":"","code":"leaves(data)"},{"path":"https://uchidamizuki.github.io/timbr/reference/leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaf nodes of a forest — leaves","text":"data forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leaf nodes of a forest — leaves","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/map_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function hierarchically to a forest — map_forest","title":"Apply a function hierarchically to a forest — map_forest","text":"Apply function hierarchically forest climbing descending direction.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/map_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function hierarchically to a forest — map_forest","text":"","code":"map_forest(.x, .f, ..., .climb = FALSE)"},{"path":"https://uchidamizuki.github.io/timbr/reference/map_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function hierarchically to a forest — map_forest","text":".x forest .f function, formula, vector (necessarily atomic). ... Additional arguments passed mapped function. .climb Climbing descending?","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/map_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function hierarchically to a forest — map_forest","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/node_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get node names — node_name","title":"Get node names — node_name","text":"Get node names","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/node_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get node names — node_name","text":"","code":"node_name()"},{"path":"https://uchidamizuki.github.io/timbr/reference/node_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get node names — node_name","text":"character vector.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/node_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get node values — node_value","title":"Get node values — node_value","text":"Get node values","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/node_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get node values — node_value","text":"","code":"node_value()"},{"path":"https://uchidamizuki.github.io/timbr/reference/node_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get node values — node_value","text":"vector.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/timbr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"timbr: Forest/Tree Data Frames — timbr-package","title":"timbr: Forest/Tree Data Frames — timbr-package","text":"Provides data frames forest tree data structures. can create forest data structures data frames process based hierarchies.","code":""},{"path":[]},{"path":"https://uchidamizuki.github.io/timbr/reference/timbr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"timbr: Forest/Tree Data Frames — timbr-package","text":"Maintainer: Mizuki Uchida uchidamizuki@vivaldi.net","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/traverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function hierarchically to a forest — traverse","title":"Apply a function hierarchically to a forest — traverse","text":"Apply function hierarchically forest climbing descending direction.","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/traverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function hierarchically to a forest — traverse","text":"","code":"traverse(.x, .f, ..., .climb = FALSE)"},{"path":"https://uchidamizuki.github.io/timbr/reference/traverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function hierarchically to a forest — traverse","text":".x forest .f function, formula, vector (necessarily atomic). ... Additional arguments passed mapped function. .climb Climbing descending?","code":""},{"path":"https://uchidamizuki.github.io/timbr/reference/traverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function hierarchically to a forest — traverse","text":"forest.","code":""},{"path":"https://uchidamizuki.github.io/timbr/news/index.html","id":"timbr-022","dir":"Changelog","previous_headings":"","what":"timbr 0.2.2","title":"timbr 0.2.2","text":"CRAN release: 2023-04-29 Rename map_forest() traverse deprecate map_forest(). Update behavior as_tbl_graph.forest(). Update deprecated functions vctrs.","code":""},{"path":"https://uchidamizuki.github.io/timbr/news/index.html","id":"timbr-021","dir":"Changelog","previous_headings":"","what":"timbr 0.2.1","title":"timbr 0.2.1","text":"CRAN release: 2023-04-07 Rename argument rowwise.forest(). Fix problems CRAN checks.","code":""},{"path":"https://uchidamizuki.github.io/timbr/news/index.html","id":"timbr-020","dir":"Changelog","previous_headings":"","what":"timbr 0.2.0","title":"timbr 0.2.0","text":"CRAN release: 2023-03-04 Now, display tree structure header forest. Fix problems CRAN checks.","code":""},{"path":"https://uchidamizuki.github.io/timbr/news/index.html","id":"timbr-011","dir":"Changelog","previous_headings":"","what":"timbr 0.1.1","title":"timbr 0.1.1","text":"CRAN release: 2022-09-19 Rename modify.forest() map_forest() modify() longer S3 generics purrr 1.0.0 (#1).","code":""},{"path":"https://uchidamizuki.github.io/timbr/news/index.html","id":"timbr-010","dir":"Changelog","previous_headings":"","what":"timbr 0.1.0","title":"timbr 0.1.0","text":"CRAN release: 2022-03-29 new release.","code":""}]
